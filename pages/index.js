import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import {useEffect, useState} from "react";
import {getSatelliteInfo} from "tle.js";

export default function Home() {
  const [follow, setFollow] = useState(false);
  const [model, setModel] = useState(true)

  const tle = 'ISS (ZARYA)\n' +
    '1 25544U 98067A   22274.03874838  .00014927  00000+0  26492-3 0  9996\n' +
    '2 25544  51.6445 172.1493 0002537 314.1559  14.3121 15.50438125361599';

  let wwd, position;
  useEffect(() => {
    const doIt = () => {
      if (position) {
        const satelliteInfo = getSatelliteInfo(tle, +new Date());
        position.latitude = satelliteInfo.lat;
        position.longitude = satelliteInfo.lng;
        position.altitude = satelliteInfo.height;

        if(follow){
          wwd.navigator.lookAtLocation.latitude = position.latitude
          wwd.navigator.lookAtLocation.longitude = position.longitude
        }
      }
      requestAnimationFrame(doIt)
    }

    requestAnimationFrame(doIt)
  })

  useEffect(() => {
    const WorldWind = import('../worldwind.min').then((WorldWind) => {
      const canvaElement = document.getElementById('canvasOne');

      canvaElement.setAttribute('height', window.innerHeight)
      canvaElement.setAttribute('width', window.innerWidth)

      wwd = new WorldWind.WorldWindow("canvasOne");

      wwd.addLayer(new WorldWind.BMNGOneImageLayer());
      wwd.addLayer(new WorldWind.BMNGLandsatLayer());

      let modelLayer = new WorldWind.RenderableLayer();
      wwd.addLayer(modelLayer);

      position = new WorldWind.Position(10.0, -125.0, 80000.0);

      if(model){
        let colladaLoader = new WorldWind.ColladaLoader(position);
        colladaLoader.init({dirPath: 'http://localhost:3000/models/'});
        colladaLoader.load("ISS.dae", function (colladaModel) {
          colladaModel.scale = 90000;
          modelLayer.addRenderable(colladaModel);
        });
      }else{
        let placemarkAttributes = new WorldWind.PlacemarkAttributes(null);
        let highlightPlacemarkAttributes = new WorldWind.PlacemarkAttributes(placemarkAttributes);
        highlightPlacemarkAttributes.imageScale = 0.4;
        placemarkAttributes.imageSource = 'http://localhost:3000/red_dot.png';
        placemarkAttributes.imageScale = 0.3;

        let placemark = new WorldWind.Placemark(position)
        placemark.attributes = placemarkAttributes;
        placemark.highlightAttributes = highlightPlacemarkAttributes

        placemarkAttributes.imageOffset = new WorldWind.Offset(
          WorldWind.OFFSET_FRACTION, 0.5,
          WorldWind.OFFSET_FRACTION, 0.5);
        placemarkAttributes.imageColor = WorldWind.Color.WHITE;
        placemarkAttributes.labelAttributes.offset = new WorldWind.Offset(
          WorldWind.OFFSET_FRACTION, 0.5,
          WorldWind.OFFSET_FRACTION, 1.0);
        placemarkAttributes.labelAttributes.color = WorldWind.Color.WHITE;

        placemark.attributes = placemarkAttributes;
        placemark.highlightAttributes = highlightPlacemarkAttributes;

        modelLayer.addRenderable(placemark)
      }
    })

  })


  useEffect(() => {

  }, )

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>
      <canvas id="canvasOne" width="1024" height="768">
        Your browser does not support HTML5 Canvas.
      </canvas>
    </div>
  )
}
